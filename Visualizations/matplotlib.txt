https://github.com/PacktPublishing/Matplotlib-3.0-Cookbook
pd.set_option("display.max_columns",50)
pd.set_option("display.width", 500)

1) simple plot
	import matplotlib as mpl
	import matplotlib.pyplot as plt
	plt.plot([1.3, 1.5])
	plt.show()

2) Add title and label to above
	import matplotlib as mpl
	import matplotlib.pyplot as plt
	plt.plot([1.3, 1.5])
	plt.title("Title")
	plt.xlabel("X label")
	plt.ylabel("y label")
	plt.show()

3) plot only one line
	plt.plot([1.3, 1.3, 1.4, 1.8]) # plots one line with x axis as count of values of list, which takes y axis


4 plot two lines in same fig with both x and y values given
    x = [1,2,3,4,5]
    y = [1,4,9,16,25]
    plt.plot(x,y) # plots first line with given values of both x and y axis
    
    x1 = [1.2,2.1,3.1,4.3,5.9]
    y1 = [1.3,4.1,9.2,16.3,25.8]
    plt.plot(x1, y1)
    plt.show() # plots second line with given values of both x and y axis

---- Default Environment variables set and reset -----
	print(matplotlib.rcParams) 
	matplotlib.rcdefaults()  # to reset default
---- Default Environment variables set and reset -----

---- Full view of default output window ----
	wm = plt.get_current_fig_manager()
	wm.window.state('zoomed')
---- Full view of default output window ----

5 creating a plot with style defined
    import matplotlib
    import matplotlib.pyplot as plt
    import pandas as pd
    df = pd.read_csv("ACC.csv")
    matplotlib.rc('lines', linewidth=1, linestyle='-', marker='*')
    matplotlib.rcParams['font.size'] = 15
    matplotlib.rcParams['lines.markersize'] = 20
    x = df['d']
    y = df['c']
    x = (x[-10:-1:1])
    y = (y[-10:-1:1])
    plt.plot(x, y)
    plt.show()
    df = pd.read_csv("ACC.csv")
    matplotlib.rc('lines', linewidth=1, linestyle='-', marker='*')
    matplotlib.rcParams['font.size'] = 15
    matplotlib.rcParams['lines.markersize'] = 20
    x = df['d']
    y = df['c']
    x = (x[-10:-1:1])
    y = (y[-10:-1:1])
    plt.plot(x, y)
    plt.show()

6)  ---- line plot using dataframe starts here ------
    
    import matplotlib
    import matplotlib.pyplot as plt
    import pandas as pd
    df = pd.read_csv("ACC.csv")
    df2 = df[['d', 'c']]
    df2.set_index('d', inplace=True)
    print(df2.head())
    plt.plot(df2)
    plt.show()

6)  ---- line plot using dataframe ends   here ------



7) ----  bar plot simple ----
    import matplotlib
    import matplotlib.pyplot as plt
    month_num = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]
    ut_sld = [100, 200, 300, 400, 555, 666, 777, 888, 999, 1000, 1100, 1200]
    plt.bar(month_num, ut_sld)
    plt.show()
7) ----  bar plot simple ----

8) ---- bar plot with values on top of bar and how the position of text is worked out -------
    import matplotlib
    import matplotlib.pyplot as plt
    import calendar
    month_num = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]
    ut_sld = [100, 200, 300, 400, 555, 666, 777, 888, 999, 1000, 1100, 1200]
    fig, ax = plt.subplots()  # plt.subplots allow us to define the layout of figure in terms of number of figues and how to organize
    plt.xticks(month_num, calendar.month_name[1:13], rotation=20)
    plot = ax.bar(month_num, ut_sld)
    for rect in plot:
        height = rect.get_height()  # gets the value of bar that needs to be shown
        ax.text(rect.get_x() + rect.get_width() / 2, 1.0002 * height, '%d' % int(height), ha="center", va="bottom")
        # above value will get text and place it just above the height of each bar
    plt.show()
8) ---- bar plot with values on top of bar and how the position of text is worked out -------

9) ----- bar horizontal ------------
    import matplotlib
    import matplotlib.pyplot as plt
    import calendar
    month_num = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]
    ut_sld = [100, 200, 300, 400, 555, 666, 777, 888, 999, 1000, 1100, 1200]
    fig, ax = plt.subplots()  # plt.subplots allow us to define the layout of figure in terms of number of figues and how to organize
    plt.yticks(month_num, calendar.month_name[1:13], rotation=20)
    plot = ax.barh(month_num, ut_sld)
    plt.show()
9) ----- bar horizontal ------------

10) ------- Scatter plot ---------
    import matplotlib
    import matplotlib.pyplot as plt
    import calendar
    import pandas as pd
    plt.figure(figsize=(10, 6))
    df = pd.read_csv("ACC.csv")
    df = df[df['Symbol'] == 'SAIL']
    print(df.head())
    x = df['d']
    y = df['Underlying Value']
    print(x)
    plt.scatter(x, y)
    plt.xticks(rotation=20)
    plt.show()
10) ------- Scatter plot ---------

11) ------- Scatter plot with colors ----------------
    import matplotlib
    import matplotlib.pyplot as plt
    import calendar
    import pandas as pd
    iris = pd.read_csv("iris.csv", sep=',')
    iris['variety'] = iris['variety'].map({'Setosa': 0, 'Versicolor': 1, 'Virginica': 2})
    plt.scatter(iris['petal_length'], iris['petal_width'], c=iris['variety'])  # here c is color
    plt.show()
11) ------- Scatter plot with colors ----------------

12) ------- Bubble plot ----------------
    import matplotlib
    import matplotlib.pyplot as plt
    import calendar
    import pandas as pd
    iris = pd.read_csv("iris.csv", sep=',')
    iris['variety'] = iris['variety'].map({'Setosa': 0, 'Versicolor': 1, 'Virginica': 2})
    plt.scatter(iris['petal_length'], iris['petal_width'], c=iris['variety'], s=50 * iris['petal_length'] * iris['petal_width'], alpha=.35)  # here c is color
    plt.show()
12) ------- Bubble plot ----------------

13) ------- Stacked --------------------
    import matplotlib
    import matplotlib.pyplot as plt
    import calendar
    import pandas as pd
    import numpy as np
    x = np.array([1,2,3,4,5,6])  # This is x axis values
    apr= [5,2,3,1,6,2]
    may= [1,3,1,6,2,3]
    jun= [6,2,3,1,3,1]
    labels = ['apr','may','jun']
    fig,ax = plt.subplots()
    ax.stackplot(x,apr,may,jun, labels= labels)
    ax.legend(loc=1) # places legend at right-top
    plt.title("tile")
    plt.xlabel("months")
    plt.ylabel('defects')
    plt.show()
13) ------- Stacked --------------------

14) ------- Pie Plot ------------------
    import matplotlib
    import matplotlib.pyplot as plt
    import calendar
    import pandas as pd
    import numpy as np
    # autopct tells the number of decimal places in % and start angle is where first slice starts and reset anticlockwise
    labels = ['SciFi','Drama','Thriller','Suspense','Comedy', 'Action' ]
    siz = [10,30,10, 15, 15 ,20] # should add to 100
    explode = (0,0,0,0,.1,0)
    plt.pie(siz,labels= labels, explode=explode, autopct='%1.1f%%', shadow=True,startangle=90 )
    plt.axis('equal') # equal means pie will be a circle
    plt.show()
14) ------- Pie Plot ------------------

15) ------- Table Chart --------------
    import matplotlib
    import matplotlib.pyplot as plt
    import pandas as pd
    import numpy as np
    rows = ['2001','2002','2003','2004','2005']
    columns = ['7Ah','35Ah','40Ah','50Ah','70Ah']
    data = np.arange(100, 125).reshape(5,5)
    print(data)
    values = np.arange(0,600,100)
    colors = plt.cm.OrRd(np.linspace(0,0.5,len(rows)))
    index = np.arange(len(columns))+.3
    bar_width = .5
    y_offset = np.zeros(len(columns))
    
    fig,ax = plt.subplots()
    cell_text= []
    n_rows = len(data)
    for row in range(n_rows):
        plot = plt.bar(index,data[row], bar_width, bottom=y_offset, color= colors[row])
        y_offset = y_offset + data[row]
        cell_text.append(['%1.1f'% (x) for x in y_offset])
        i=0
        for rect in plot:
            height = rect.get_height()
            ax.text(rect.get_x() + rect.get_width()/2,y_offset[i], '%d' %int(y_offset[i]), ha='center', va= 'bottom')
        i=i+1
    
    the_table = plt.table(cellText=cell_text, rowLabels=rows, rowColours=colors, colLabels=columns, loc='bottom')
    plt.ylabel("Unsold")
    
    plt.xticks([])
    plt.title('Number Of Batteries Sold/Year')
    plt.show()
15) ------- Table Chart --------------

16) ------- Histogram ----------------
    import matplotlib
    import matplotlib.pyplot as plt
    import pandas as pd
    import numpy as np
    import random
    lst =[]
    randomNumbers = 1200
    for i in range(0,randomNumbers):
        lst.append(random.randint(1,randomNumbers))
    grp_exp = np.array(lst)
    nbins = 10
    n, bin, patches = plt.hist(grp_exp,bins=nbins)
    plt.xlabel("Experiments Per Year")
    plt.ylabel("Frequency")
    plt.title("Distribution of Training")
    plt.axvline(x=grp_exp.mean(),linewidth= 2, color= 'r')
    plt.show()
16) ------- Histogram ----------------

17) ------- Histogram with std dev line plot -------------
    import matplotlib
    import matplotlib.pyplot as plt
    import pandas as pd
    import numpy as np
    import random
    lst =[]
    randomNumbers = 120
    for i in range(0,randomNumbers):
        lst.append(random.randint(1,randomNumbers))
    grp_exp = np.array(lst)
    nbins = 21
    fig, ax = plt.subplots()
    n, bins, patches = plt.hist(grp_exp,bins=nbins)
    plt.xlabel("Experiments Per Year")
    plt.ylabel("Frequency")
    plt.title("Distribution of Training")
    mu= grp_exp.mean()
    sigma = grp_exp.std()
    y = ((1/np.sqrt(2*np.pi)*sigma))* np.exp(-0.5*(1/sigma *(bins -mu)**2))
    plt.plot(bins, y, "--")
    plt.show()
17) ------- Histogram with std dev line plot -------------

18) ------- Boxplot -----------------
    import matplotlib
    import matplotlib.pyplot as plt
    import pandas as pd
    import numpy as np
    df = pd.read_csv("ACC.csv")
    data = [df['h'], df['l'],df['c']]
    plt.boxplot(data)
    plt.show()
18) ------- Boxplot -----------------

19) ------- Multiple Charts on same figure--------------------
    import matplotlib.pyplot as plt
    import pandas as pd
    fpr_KNN = pd.read_excel('ROC_Curves.xlsx', 'fpr_KNN')
    tpr_KNN = pd.read_excel('ROC_Curves.xlsx', 'tpr_KNN')
    fpr_MLP = pd.read_excel('ROC_Curves.xlsx', 'fpr_MLP')
    tpr_MLP = pd.read_excel('ROC_Curves.xlsx', 'tpr_MLP')
    fpr_SGD = pd.read_excel('ROC_Curves.xlsx', 'fpr_SGD')
    tpr_SGD = pd.read_excel('ROC_Curves.xlsx', 'tpr_SGD')
    fpr_RF = pd.read_excel('ROC_Curves.xlsx', 'fpr_RF')
    tpr_RF = pd.read_excel('ROC_Curves.xlsx', 'tpr_RF')
    fpr_DT = pd.read_excel('ROC_Curves.xlsx', 'fpr_DT')
    tpr_DT = pd.read_excel('ROC_Curves.xlsx', 'tpr_DT')
    plt.plot([0, 1], [0, 1], 'k--')  # plots a line at 45 degree
    plt.plot(fpr_KNN, tpr_KNN, label='KNN',color='green')
    plt.plot(fpr_DT, tpr_DT, label='DecisionTree', color='orange')
    plt.plot(fpr_RF, tpr_RF, label='Random Forest',color='yellow')
    plt.plot(fpr_MLP, tpr_MLP, label='MLP',color='red')
    plt.plot(fpr_SGD, tpr_SGD, label='SGD', color='pink')
    plt.xlabel('False Positive Rate')
    plt.ylabel('True Positive Rate')
    plt.title('ROC curve')
    plt.legend(loc='best')
    plt.show()
19) ------- Multiple Charts on same figure--------------------

20) ------- Subplots on Same figure ---------------------
    import matplotlib.pyplot as plt
    import pandas as pd
    fig = plt.figure()
    ax1 = plt.subplot(2,2,1) #(row,col, number)
    ax2 = plt.subplot(2,2,2)
    ax3 = plt.subplot(2,1,2)
    ax1.plot([1,2])
    ax2.plot([2,1])
    ax3.plot([3,1])
    plt.show()
20) ------- Subplots on Same figure ---------------------

21) -------- More on Subplots on Same figure -------------
    import matplotlib.pyplot as plt
    import pandas as pd
    wine_qty= pd.read_csv("winequality.csv", delimiter=";")
    iris = pd.read_csv("iris_dataset.csv", delimiter=',')
    iris_mean = iris.mean()
    iris_std = iris.std()
    fig, axs = plt.subplots(2,2,figsize=(8,8))
    axs[0,0].hist(wine_qty['alcohol'])
    axs[0,0].set_title("Title Alcohol Frequency")
    axs[0,0].set_xlabel('Alcohol Bin')
    axs[0,0].set_ylabel("Frequency")
    axs[0,1].plot(iris['sepal_length'])
    axs[0,1].set_title("Sepal L Frequency")
    axs[0,1].set_xlabel('sepal_length')
    axs[0,1].set_ylabel("sepal frequency")
    axs[1,0].scatter(iris['petal_length'],iris['petal_width'], c=iris['species'].map({'setosa': 0, 'versicolor': 1, 'virginica': 2}))
    axs[1,0].set(title = 'Scatter', xlabel = 'Petal Len', ylabel = 'Petal Wd' )
    axs[1,1].bar(['sepal_l', 'sepal_w', 'petal_l', 'petal_w'],iris_mean, yerr= iris_std )
    axs[1,1].set(title = 'Bar', xlabel = 'category', ylabel = 'Category Mean')
    plt.suptitle("Subplots Demo")
    plt.tight_layout(pad=3, w_pad=1, h_pad=1)
    plt.show()
21) -------- More on Subplots on Same figure -------------  

22) -------- Multiple figures in single session ----------
    import matplotlib.pyplot as plt
    import pandas as pd
    iris = pd.read_csv("iris_dataset.csv", sep=',')
    plt.close('all') # canvas cleaned
    fig= plt.figure(1, figsize=(10,10))
    ax1 = plt.subplot2grid((3,3),(0,0))
    ax2 = plt.subplot2grid((3,3),(0,1), colspan=2)
    ax3 = plt.subplot2grid((3,3),(1,0), colspan=2, rowspan=2)
    ax4 = plt.subplot2grid((3,3),(1,2), rowspan=2)
    ax1.hist(iris['petal_width'])
    ax2.scatter(iris['petal_length'],iris['petal_width'], s=50*iris['petal_length']*iris['petal_width'],
                alpha=.26, c= iris['species'].map({'setosa': 0, 'versicolor': 1, 'virginica': 2}))
    ax3.scatter(iris['petal_length'],iris['petal_width'], c= iris['species'].map({'setosa': 0, 'versicolor': 1, 'virginica': 2}))
    ax4.violinplot(iris['petal_length'])
    plt.suptitle("Fig 1: Grid Plotting Demo", fontsize =20)
    plt.tight_layout(pad=5, w_pad=1, h_pad=1)
    plt.figure(2, figsize=(12,5))
    names= ['gp_a','gp_b','gp_c','gp_d','gp_e','gp_f']
    values = [1,2,3,4,5,6]
    plt.subplot(131)
    plt.bar(names, values, color='orange')
    plt.subplot(132)
    plt.scatter(names, values, color='orange')
    plt.subplot(133)
    plt.plot(names, values, color='orange')
    plt.suptitle("Fig 2: Row Plotting Demo", fontsize =20)
    plt.tight_layout(pad=5, w_pad=1, h_pad=1)
    plt.show()
22) -------- Multiple figures in single session ----------

23) -------- Logarithmic scale -------
import matplotlib.pyplot as plt
    import pandas as pd
    fig , (ax1,ax2,ax3) = plt.subplots(1,3) # defines layout and axis, with three axes to be plotted in as row
    ax1.plot([0.1,5,10,500], [0.01,25,50,10000], "x-") # due to large differences, values are not visible.
    ax1.set(title= "Linear Scale with no chart", xlim= (1e1, 1e3), ylim=(1e2, 1e3))
    ax2.set(title= "adjustable=box", xscale="log", yscale="log", xlim= (1e1, 1e3), ylim=(1e2, 1e3), aspect=2 )
    #aspect=2 above means ratio of y values is twice the values of x
    ax3.plot([0.1,5,10,500], [0.01,25,50,10000], "o-")
    ax3.set(title="adjustable=datalim",xscale="log",yscale="log",adjustable="datalim",xlim=(1e-1,1e3), ylim=(1e-1,1e4), aspect=1 )
    plt.tight_layout()
    plt.show()
23) -------- Logarithmic scale -------

24) ------- More on Logarithmic scale-----
    import matplotlib.pyplot as plt
    import numpy as np
    import pandas as pd
    menMeans= [3,10,100,500,50]
    menStd=[.75,2.5,25,125,12.5]
    womenMeans=[1000,3,30,800,1]
    womenStd= [500,.75,8,200,.25]
    fig, ax = plt.subplots()
    ind= np.arange(len(menMeans))
    width = 0.35
    p1 = ax.bar(ind,menMeans,width,color= 'lightblue', bottom= 0, yerr= menStd)
    p2= ax.bar(ind+width, womenMeans,width, color ='orange',  bottom= 0, yerr= womenStd)
    ax.set_title('Scores by category and gender')
    ax.set_xticks(ind + width/2)
    ax.set_xticklabels(('C1','C2','C3','C4','C5'))
    ax.set_yscale('log')
    ax.legend((p1[0],p2[0]),('Men','Women')) 
    plt.show() 
24) ------- More on Logarithmic scale-----

---------------------------------------------------------- Excercise1 -------------------------------------------------------
1) ---- A scatter plot of flowers -------------
import pandas as pd
import numpy as np
import matplotlib
import matplotlib.pyplot as plt
pd.set_option("display.max_columns",50)
pd.set_option("display.width", 500)
df = pd.read_csv("iris_dataset.csv")
print(df.head())
s_sepal_length = df['sepal_length'].squeeze()
s_sepal_width =df['sepal_width'].squeeze()
s_petal_length = df['petal_length'].squeeze()
s_petal_width = df['petal_width'].squeeze()
s_species = df['species'].squeeze()
fig, (ax1,ax2,ax3,ax4) = plt.subplots(1,4)
ax1.scatter(s_petal_width, s_petal_length , c= s_species.map({'setosa': 0, 'versicolor': 1, 'virginica': 2}))
ax3.scatter(s_sepal_width, s_sepal_length , c= s_species.map({'setosa': 0, 'versicolor': 1, 'virginica': 2}))
ax1.set(title ='petal category')
plt.show()
1) ---- A scatter plot of flowers -------------

2) ---- 
  
---------------------------------------------------------- Excercise1 -------------------------------------------------------

---------------------------------------------------------- Excercise2 -------------------------------------------------------
import matplotlib as mpl
import matplotlib.pyplot as plt
import pandas as pd
pd.set_option("display.max_columns",50)
pd.set_option("display.width", 500)
mpl.rc('lines',linewidth=1, linestyle='-')
df= pd.read_csv('datafile.csv')
print(df.head())
fig,(ax) = plt.subplots(2,2)
ax[0,0].set(title ="UV")
ax[0,0].scatter( df[df['Symbol']=='SAIL']['Date'], df[df['Symbol']=='SAIL']['Underlying Value'],c='green', alpha=.6 ,s=1*df[df['Symbol']=='SAIL']['Underlying Value'] )
ax[0,0].scatter( df[df['Symbol']=='BHEL']['Date'], df[df['Symbol']=='BHEL']['Underlying Value'],c='violet', alpha=.6 ,s=1*df[df['Symbol']=='BHEL']['Underlying Value'])
ax[0,0].plot( df[df['Symbol']=='SAIL']['Date'], df[df['Symbol']=='SAIL']['Underlying Value'])
ax[0,0].plot( df[df['Symbol']=='BHEL']['Date'], df[df['Symbol']=='BHEL']['Underlying Value'])
ax[0,0].set_xticklabels(df[df['Symbol']=='SAIL']['Date'],rotation =20, fontsize = 5)
ax[0,0].set(title="Line Scatter")
ax[0,0].set_yticklabels(df[df['Symbol']=='SAIL']['Underlying Value'],rotation =20, fontsize = 7)
ax[0,1].plot(df['Underlying Value'])
ax[0,1].plot(df['LTP'])
ax[1,0].plot(df['LTP'])
ax[1,0].plot(df['Settle'])
o_sum = df['Open'].sum()
h_sum = df['High'].sum()
l_sun = df['Low'].sum()
c_sum = df['Close'].sum()
x_buckets =["O","H","L","C"]
p= ax[1,1].bar(x_buckets, [o_sum,h_sum,l_sun,c_sum]) # use this p assignment as it is barContainer class
print(type(p))
for rect in p:
    print(rect)
    height = rect.get_height()
    print("---", rect.get_y())
    ax[1,1].text(rect.get_x() + rect.get_width() / 2, .7 * height, int(height), ha="center", va="bottom" , fontsize=10)
plt.tight_layout(pad=3, w_pad=1, h_pad=1)
plt.show()
---------------------------------------------------------- Excercise2 -------------------------------------------------------

---------------------------------------------------------- Excercise3 -------------------------------------------------------
------------  1 size of figure --------------
import matplotlib as mpl
import matplotlib.pyplot as plt
fig = plt.figure(figsize=(12,10))
plt.show()
------------  2 size of figure --------------



---------------------------------------------------------- Excercise3 -------------------------------------------------------




------------------------------------------------------ Visualizations for publishing Quality --------------------------------------------
25) -------  -------------

25) -------  -------------
------------------------------------------------------ Visualizations for publishing Quality --------------------------------------------

----------------------------------------  Matplotlib Guide ------------------------------------------
1) - Matplotlib plots data on Figure(s) (windows, jupyter widgets), each of these Figures can contain one or more axis(A point where x,y cordinates can be defined)
import matplotlib as mpl
import matplotlib.pyplot as plt
import numpy as np
fig, ax = plt.subplots() # creates a figure with single axis
ax.plot([1,2,3,4],[1,2,3,4]) #plots some data on axis
plt.show()

2) --- Axes and Axis
- Axes contains regins for plotting and usually includes two axis objects.
- Axes Has title, x_label , y_label 
- Uses OOPs inerface and many plottings methods are defined on them


- Axis provides ticks and ticks labels 
- Axis objects set scale and limits and generates ticks. 
- Location of ticks is determined by Locator and Formatter gives very fine control over tick locations and labels


- USE ARRAYS (Pandas objects may not work)

3)---- A plot showing how to deine size of a single figure and plot a scatter ----------- 
np.random.seed(19680801)  # seed the random number generator.
data = {'a': np.arange(50),
        'c': np.random.randint(0, 50, 50),
        'd': np.random.randn(50)}
data['b'] = data['a'] + 10 * np.random.randn(50)
data['d'] = np.abs(data['d']) * 100

fig, ax = plt.subplots(figsize=(5, 2.7), layout='constrained')
ax.scatter('a', 'b', c='c', s='d', data=data)
ax.set_xlabel('entry a')
ax.set_ylabel('entry b'); 
---- A plot showing how to deine size of a single figure and plot a scatter -----------
 
4) Two ways of plotting using (fig ax= plt.subplots(...paramss)) OR (plt.figure(.. parameters)  and then call plt.plot(differentdataset) many times ) 
--- 4.1--
x = np.linspace(0, 2, 100)  # Sample data.

# Note that even in the OO-style, we use `.pyplot.figure` to create the Figure.
fig, ax = plt.subplots(figsize=(5, 2.7), layout='constrained')
ax.plot(x, x, label='linear')  # Plot some data on the axes.
ax.plot(x, x**2, label='quadratic')  # Plot more data on the axes...
ax.plot(x, x**3, label='cubic')  # ... and some more.
ax.set_xlabel('x label')  # Add an x-label to the axes.
ax.set_ylabel('y label')  # Add a y-label to the axes.
ax.set_title("Simple Plot")  # Add a title to the axes.
ax.legend();  # Add a legend.

---- 4.2
x = np.linspace(0, 2, 100)  # Sample data.

plt.figure(figsize=(5, 2.7), layout='constrained')
plt.plot(x, x, label='linear')  # Plot some data on the (implicit) axes.
plt.plot(x, x**2, label='quadratic')  # etc.
plt.plot(x, x**3, label='cubic')
plt.xlabel('x label')
plt.ylabel('y label')
plt.title("Simple Plot")
plt.legend();

5) -- Styling Artist---
fig, ax = plt.subplots(figsize=(10,6))
ax.plot(range(len(x1)), np.cumsum(x1), color ='blue', linestyle='-') 

6) -- Legend and symbols
import numpy as np
import matplotlib.pyplot as plt
x1 =np.random.randn(100)
x2 =np.random.randn(100)
x3 =np.random.randn(100)
x4 =np.random.randn(100)
fig, ax = plt.subplots(figsize=(5, 2.7))
ax.plot(x1, 'o', label='data1')
ax.plot(x2, 'd', label='data2')
ax.plot(x3, 'v', label='data3')
ax.plot(x4, 's', label='data4')
ax.legend()
plt.show()


7) --- Lebeling plots ------
import numpy as np
import matplotlib.pyplot as plt
mu, sigma = 115, 15
x = mu + sigma * np.random.randn(10000)
fig, ax = plt.subplots(figsize=(5, 2.7), layout='constrained')
# the histogram of the data
n, bins, patches = ax.hist(x, 30, density=True, facecolor='C0', alpha=0.75)
ax.set_xlabel('Length [cm]')
ax.set_ylabel('Probability')
ax.set_title('Aardvark lengths\n (not really)')
ax.text(75, .027, r'$\mu=115,\ \sigma=15$')
ax.axis([55, 175, 0, 0.03])
ax.grid(True);
plt.show()
7) --- Lebeling plots ------

8) --- Scales
fig, axs = plt.subplots(1, 2, figsize=(5, 2.7), layout='constrained')
xdata = np.arange(len(data1))  # make an ordinal for this
data = 10**data1
axs[0].plot(xdata, data)
axs[1].set_yscale('log')
axs[1].plot(xdata, data);
8) --- Scales


9) --- Tick locator and Formatter-----
fig, axs = plt.subplots(2, 1, layout='constrained')
axs[0].plot(xdata, data1)
axs[0].set_title('Automatic ticks')
axs[1].plot(xdata, data1)
axs[1].set_xticks(np.arange(0, 100, 30), ['zero', '30', 'sixty', '90'])
axs[1].set_yticks([-1.5, 0, 1.5])  # note that we don't need to specify labels
axs[1].set_title('Manual ticks');
9) --- Tick locator and Formatter-----
----------------------------------------  Matplotlib Guide ------------------------------------------


-----------------------------------------------------1 Workshop -Create a figure that has multiple plots with Title and formating--------------------------------
import pandas as pd
import numpy as np
import matplotlib
import matplotlib.pyplot as plt
pd.set_option("display.max_columns",50)
pd.set_option("display.width", 500)
df = pd.read_csv("iris_dataset.csv")
print(df.head())

s_sepal_length = df['sepal_length'].squeeze()
s_sepal_width =df['sepal_width'].squeeze()
s_petal_length = df['petal_length'].squeeze()
s_petal_width = df['petal_width'].squeeze()
s_species = df['species'].squeeze()

fig, ax = plt.subplots(2,2)
fig.suptitle("Plot Details")

x = np.linspace(0, 2 * np.pi, 400)
y = np.sin(x ** 2)

ax[0,0].plot(x,y)
ax[0,0].set_title('Axis [0,0] Sine', color ='indigo')
ax[0,0].set_xticklabels(["","one", "two", "three", "four"], fontsize=10, color='blue')
ax[0,1].scatter(s_sepal_length, s_sepal_width, c= s_species.map({'setosa': 0, 'versicolor': 1, 'virginica': 2}))
ax[0,1].set_title("Axis[0,1] Sepats", color = 'red')
ax[1,0].scatter(s_petal_length, s_petal_width, c= s_species.map({'setosa': 0, 'versicolor': 1, 'virginica': 2}))
ax[1,0].set_title("Axis[0,1] Petals", color = 'brown')

import pandas as pd
import numpy as np
import random
lst =[]
randomNumbers= 100
for i in range(randomNumbers):
    lst.append(np.random.randint(0,randomNumbers))
print(lst)
grp_exp = np.array(lst)
print(np.array(lst))
nbins = 21
n, bins, patches = ax[1,1].hist(grp_exp,bins=nbins, edgecolor='black', linewidth= .5)

ax[1,1].set_title("Axis[1,1] Random", color = 'blue')

fig.tight_layout()
plt.show()
-----------------------------------------------------1 Workshop -Create a figure that has multiple plots with Title and formating--------------------------------



---------------------------------  Interactive Plotting Starts ------------------
1) Event and callback
	1.1) Exception Handeling
	1.2) Keypress and release events
	1.3) Button press for zoom
	1.4) Motion notification and button press event for tracking coordinates
	1.5) Pick event to make an artist active on clicking its label 
	1.6) Figure and axes enter and leave
	1.7) Twin axis
2) Widgets
	2.1) Cursor, Button, Checkbox, Radio button, Text
3) Animaton
	3.1) Animated sigmode
	3.2) Saving animation tp MP4
	3.3) Exponentially decaying tan function
	3.4) Animated bubble plot
	3.5) Animated multiple line plots
	3.6) Animation of images

---------------------------------  Interactive Plotting Ends ------------------
----------------1--------------------
import matplotlib
matplotlib.use('nbAgg')
import time

class EventLoop:
    def __init__(self):
        self.status = None
        self.event_handlers= {"interrupt":self.handle_interrupt, "DivideByZero":self.handle_DivideByZero}
    def start(self):
        try:
            self.loop()
        except KeyboardInterrupt:
            self.handle_event("interrupt")
        except ZeroDivisionError:
            self.handle_event("DivideByZero")
        finally:
            print("Ending Program")
    def loop(self):
        self.status= "loop"
        strt_time = time.time()
        while self.status=='loop':
            elapsed_time = time.time()- strt_time
            if elapsed_time >30:
                5/0
    def handle_event(self, event:str):
        self.event_handlers[event]()

    def handle_interrupt(self):
        print("Stopping program due to keyboard interupt")
    def handle_DivideByZero(self):
        print("Stopping due to Divide by Zero")

el = EventLoop()
el.start()
print("done")
----------------1--------------------

----------------2--------------------
import numpy as np
import matplotlib.pyplot as plt
plt.switch_backend('Qt5Agg')
from time import time

def press(event):
    global prst
    prst= time()
    print("press", event.key)
def release(event):
    relt = time()
    ht = relt - prst
    print("hold Time", round(ht,2))
    if event.key=='x':
        visible = lg.get_visible()
        lg.set_visible(not visible)
        tm = 'hold time: ' + str(round(ht,2))
        t = plt.text(np.random.randint(1,4), np.random.randint(-3,4),tm)
        plt.setp(t,color='r', size= 15, weight= 'bold')
        ax.add_artist(t)
        fig.canvas.draw()
x = np.arange(1,2.6,0.1)
y = 3*np.sin(2*np.pi*x)
y1= 3*np.cos(2*np.pi*x)

fig, ax = plt.subplots()
ax.plot(x, y, 'go- ', label= 'sin')
ax.plot(x, y1, 'bd- ', label= 'cos')
lg = ax.legend(loc= 'upper center', fontsize = 15)
ax.set_titel('Press a key', size= 25)
fig.canvas.mpl_connect('key_press_event', press)
fig.canvas.mpl_connect('key_release_event', release)
plt.show()
----------------2--------------------
-------------------------

