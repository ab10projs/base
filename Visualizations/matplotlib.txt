https://github.com/PacktPublishing/Matplotlib-3.0-Cookbook


1) simple plot
	import matplotlib as mpl
	import matplotlib.pyplot as plt
	plt.plot([1.3, 1.5])
	plt.show()

2) Add title and label to above
	import matplotlib as mpl
	import matplotlib.pyplot as plt
	plt.plot([1.3, 1.5])
	plt.title("Title")
	plt.xlabel("X label")
	plt.ylabel("y label")
	plt.show()

3) plot only one line
	plt.plot([1.3, 1.3, 1.4, 1.8]) # plots one line with x axis as count of values of list, which takes y axis


4 plot two lines in same fig with both x and y values given
    x = [1,2,3,4,5]
    y = [1,4,9,16,25]
    plt.plot(x,y) # plots first line with given values of both x and y axis
    
    x1 = [1.2,2.1,3.1,4.3,5.9]
    y1 = [1.3,4.1,9.2,16.3,25.8]
    plt.plot(x1, y1)
    plt.show() # plots second line with given values of both x and y axis

---- Default Environment variables set and reset -----
	print(matplotlib.rcParams) 
	matplotlib.rcdefaults()  # to reset default
---- Default Environment variables set and reset -----

---- Full view of default output window ----
	wm = plt.get_current_fig_manager()
	wm.window.state('zoomed')
---- Full view of default output window ----

5 creating a plot with style defined
    import matplotlib
    import matplotlib.pyplot as plt
    import pandas as pd
    df = pd.read_csv("ACC.csv")
    matplotlib.rc('lines', linewidth=1, linestyle='-', marker='*')
    matplotlib.rcParams['font.size'] = 15
    matplotlib.rcParams['lines.markersize'] = 20
    x = df['d']
    y = df['c']
    x = (x[-10:-1:1])
    y = (y[-10:-1:1])
    plt.plot(x, y)
    plt.show()
    df = pd.read_csv("ACC.csv")
    matplotlib.rc('lines', linewidth=1, linestyle='-', marker='*')
    matplotlib.rcParams['font.size'] = 15
    matplotlib.rcParams['lines.markersize'] = 20
    x = df['d']
    y = df['c']
    x = (x[-10:-1:1])
    y = (y[-10:-1:1])
    plt.plot(x, y)
    plt.show()

6)  ---- line plot using dataframe starts here ------
    
    import matplotlib
    import matplotlib.pyplot as plt
    import pandas as pd
    df = pd.read_csv("ACC.csv")
    df2 = df[['d', 'c']]
    df2.set_index('d', inplace=True)
    print(df2.head())
    plt.plot(df2)
    plt.show()

6)  ---- line plot using dataframe ends   here ------



7) ----  bar plot simple ----
    import matplotlib
    import matplotlib.pyplot as plt
    month_num = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]
    ut_sld = [100, 200, 300, 400, 555, 666, 777, 888, 999, 1000, 1100, 1200]
    plt.bar(month_num, ut_sld)
    plt.show()
7) ----  bar plot simple ----

8) ---- bar plot with values on top of bar and how the position of text is worked out -------
    import matplotlib
    import matplotlib.pyplot as plt
    import calendar
    month_num = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]
    ut_sld = [100, 200, 300, 400, 555, 666, 777, 888, 999, 1000, 1100, 1200]
    fig, ax = plt.subplots()  # plt.subplots allow us to define the layout of figure in terms of number of figues and how to organize
    plt.xticks(month_num, calendar.month_name[1:13], rotation=20)
    plot = ax.bar(month_num, ut_sld)
    for rect in plot:
        height = rect.get_height()  # gets the value of bar that needs to be shown
        ax.text(rect.get_x() + rect.get_width() / 2, 1.0002 * height, '%d' % int(height), ha="center", va="bottom")
        # above value will get text and place it just above the height of each bar
    plt.show()
8) ---- bar plot with values on top of bar and how the position of text is worked out -------

9) ----- bar horizontal ------------
    import matplotlib
    import matplotlib.pyplot as plt
    import calendar
    month_num = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]
    ut_sld = [100, 200, 300, 400, 555, 666, 777, 888, 999, 1000, 1100, 1200]
    fig, ax = plt.subplots()  # plt.subplots allow us to define the layout of figure in terms of number of figues and how to organize
    plt.yticks(month_num, calendar.month_name[1:13], rotation=20)
    plot = ax.barh(month_num, ut_sld)
    plt.show()
9) ----- bar horizontal ------------

10) ------- Scatter plot ---------
    import matplotlib
    import matplotlib.pyplot as plt
    import calendar
    import pandas as pd
    plt.figure(figsize=(10, 6))
    df = pd.read_csv("ACC.csv")
    df = df[df['Symbol'] == 'SAIL']
    print(df.head())
    x = df['d']
    y = df['Underlying Value']
    print(x)
    plt.scatter(x, y)
    plt.xticks(rotation=20)
    plt.show()
10) ------- Scatter plot ---------

11) ------- Scatter plot with colors ----------------
    import matplotlib
    import matplotlib.pyplot as plt
    import calendar
    import pandas as pd
    iris = pd.read_csv("iris.csv", sep=',')
    iris['variety'] = iris['variety'].map({'Setosa': 0, 'Versicolor': 1, 'Virginica': 2})
    plt.scatter(iris['petal_length'], iris['petal_width'], c=iris['variety'])  # here c is color
    plt.show()
11) ------- Scatter plot with colors ----------------

12) ------- Bubble plot ----------------
    import matplotlib
    import matplotlib.pyplot as plt
    import calendar
    import pandas as pd
    iris = pd.read_csv("iris.csv", sep=',')
    iris['variety'] = iris['variety'].map({'Setosa': 0, 'Versicolor': 1, 'Virginica': 2})
    plt.scatter(iris['petal_length'], iris['petal_width'], c=iris['variety'], s=50 * iris['petal_length'] * iris['petal_width'], alpha=.35)  # here c is color
    plt.show()
12) ------- Bubble plot ----------------

13) ------- Stacked --------------------
    import matplotlib
    import matplotlib.pyplot as plt
    import calendar
    import pandas as pd
    import numpy as np
    x = np.array([1,2,3,4,5,6])  # This is x axis values
    apr= [5,2,3,1,6,2]
    may= [1,3,1,6,2,3]
    jun= [6,2,3,1,3,1]
    labels = ['apr','may','jun']
    fig,ax = plt.subplots()
    ax.stackplot(x,apr,may,jun, labels= labels)
    ax.legend(loc=1) # places legend at right-top
    plt.title("tile")
    plt.xlabel("months")
    plt.ylabel('defects')
    plt.show()
13) ------- Stacked --------------------

14) ------- Pie Plot ------------------
    import matplotlib
    import matplotlib.pyplot as plt
    import calendar
    import pandas as pd
    import numpy as np
    # autopct tells the number of decimal places in % and start angle is where first slice starts and reset anticlockwise
    labels = ['SciFi','Drama','Thriller','Suspense','Comedy', 'Action' ]
    siz = [10,30,10, 15, 15 ,20] # should add to 100
    explode = (0,0,0,0,.1,0)
    plt.pie(siz,labels= labels, explode=explode, autopct='%1.1f%%', shadow=True,startangle=90 )
    plt.axis('equal') # equal means pie will be a circle
    plt.show()
14) ------- Pie Plot ------------------

15) ------- Table Chart --------------
    import matplotlib
    import matplotlib.pyplot as plt
    import pandas as pd
    import numpy as np
    rows = ['2001','2002','2003','2004','2005']
    columns = ['7Ah','35Ah','40Ah','50Ah','70Ah']
    data = np.arange(100, 125).reshape(5,5)
    print(data)
    values = np.arange(0,600,100)
    colors = plt.cm.OrRd(np.linspace(0,0.5,len(rows)))
    index = np.arange(len(columns))+.3
    bar_width = .5
    y_offset = np.zeros(len(columns))
    
    fig,ax = plt.subplots()
    cell_text= []
    n_rows = len(data)
    for row in range(n_rows):
        plot = plt.bar(index,data[row], bar_width, bottom=y_offset, color= colors[row])
        y_offset = y_offset + data[row]
        cell_text.append(['%1.1f'% (x) for x in y_offset])
        i=0
        for rect in plot:
            height = rect.get_height()
            ax.text(rect.get_x() + rect.get_width()/2,y_offset[i], '%d' %int(y_offset[i]), ha='center', va= 'bottom')
        i=i+1
    
    the_table = plt.table(cellText=cell_text, rowLabels=rows, rowColours=colors, colLabels=columns, loc='bottom')
    plt.ylabel("Unsold")
    
    plt.xticks([])
    plt.title('Number Of Batteries Sold/Year')
    plt.show()
15) ------- Table Chart --------------

16) ------- Histogram ----------------
    import matplotlib
    import matplotlib.pyplot as plt
    import pandas as pd
    import numpy as np
    import random
    lst =[]
    randomNumbers = 1200
    for i in range(0,randomNumbers):
        lst.append(random.randint(1,randomNumbers))
    grp_exp = np.array(lst)
    nbins = 10
    n, bin, patches = plt.hist(grp_exp,bins=nbins)
    plt.xlabel("Experiments Per Year")
    plt.ylabel("Frequency")
    plt.title("Distribution of Training")
    plt.axvline(x=grp_exp.mean(),linewidth= 2, color= 'r')
    plt.show()
16) ------- Histogram ----------------

17) ------- Histogram with std dev line plot -------------
    import matplotlib
    import matplotlib.pyplot as plt
    import pandas as pd
    import numpy as np
    import random
    lst =[]
    randomNumbers = 120
    for i in range(0,randomNumbers):
        lst.append(random.randint(1,randomNumbers))
    grp_exp = np.array(lst)
    nbins = 21
    fig, ax = plt.subplots()
    n, bins, patches = plt.hist(grp_exp,bins=nbins)
    plt.xlabel("Experiments Per Year")
    plt.ylabel("Frequency")
    plt.title("Distribution of Training")
    mu= grp_exp.mean()
    sigma = grp_exp.std()
    y = ((1/np.sqrt(2*np.pi)*sigma))* np.exp(-0.5*(1/sigma *(bins -mu)**2))
    plt.plot(bins, y, "--")
    plt.show()
17) ------- Histogram with std dev line plot -------------

18) ------- Boxplot -----------------
    import matplotlib
    import matplotlib.pyplot as plt
    import pandas as pd
    import numpy as np
    df = pd.read_csv("ACC.csv")
    data = [df['h'], df['l'],df['c']]
    plt.boxplot(data)
    plt.show()
18) ------- Boxplot -----------------

19) ------- Multiple Charts on same figure--------------------
    import matplotlib.pyplot as plt
    import pandas as pd
    fpr_KNN = pd.read_excel('ROC_Curves.xlsx', 'fpr_KNN')
    tpr_KNN = pd.read_excel('ROC_Curves.xlsx', 'tpr_KNN')
    fpr_MLP = pd.read_excel('ROC_Curves.xlsx', 'fpr_MLP')
    tpr_MLP = pd.read_excel('ROC_Curves.xlsx', 'tpr_MLP')
    fpr_SGD = pd.read_excel('ROC_Curves.xlsx', 'fpr_SGD')
    tpr_SGD = pd.read_excel('ROC_Curves.xlsx', 'tpr_SGD')
    fpr_RF = pd.read_excel('ROC_Curves.xlsx', 'fpr_RF')
    tpr_RF = pd.read_excel('ROC_Curves.xlsx', 'tpr_RF')
    fpr_DT = pd.read_excel('ROC_Curves.xlsx', 'fpr_DT')
    tpr_DT = pd.read_excel('ROC_Curves.xlsx', 'tpr_DT')
    plt.plot([0, 1], [0, 1], 'k--')  # plots a line at 45 degree
    plt.plot(fpr_KNN, tpr_KNN, label='KNN',color='green')
    plt.plot(fpr_DT, tpr_DT, label='DecisionTree', color='orange')
    plt.plot(fpr_RF, tpr_RF, label='Random Forest',color='yellow')
    plt.plot(fpr_MLP, tpr_MLP, label='MLP',color='red')
    plt.plot(fpr_SGD, tpr_SGD, label='SGD', color='pink')
    plt.xlabel('False Positive Rate')
    plt.ylabel('True Positive Rate')
    plt.title('ROC curve')
    plt.legend(loc='best')
    plt.show()
19) ------- Multiple Charts on same figure--------------------

20) ------- Subplots on Same figure ---------------------
    import matplotlib.pyplot as plt
    import pandas as pd
    fig = plt.figure()
    ax1 = plt.subplot(2,2,1) #(row,col, number)
    ax2 = plt.subplot(2,2,2)
    ax3 = plt.subplot(2,1,2)
    ax1.plot([1,2])
    ax2.plot([2,1])
    ax3.plot([3,1])
    plt.show()
20) ------- Subplots on Same figure ---------------------

21) -------- More on Subplots on Same figure -------------
    import matplotlib.pyplot as plt
    import pandas as pd
    wine_qty= pd.read_csv("winequality.csv", delimiter=";")
    iris = pd.read_csv("iris_dataset.csv", delimiter=',')
    iris_mean = iris.mean()
    iris_std = iris.std()
    fig, axs = plt.subplots(2,2,figsize=(8,8))
    axs[0,0].hist(wine_qty['alcohol'])
    axs[0,0].set_title("Title Alcohol Frequency")
    axs[0,0].set_xlabel('Alcohol Bin')
    axs[0,0].set_ylabel("Frequency")
    axs[0,1].plot(iris['sepal_length'])
    axs[0,1].set_title("Sepal L Frequency")
    axs[0,1].set_xlabel('sepal_length')
    axs[0,1].set_ylabel("sepal frequency")
    axs[1,0].scatter(iris['petal_length'],iris['petal_width'], c=iris['species'].map({'setosa': 0, 'versicolor': 1, 'virginica': 2}))
    axs[1,0].set(title = 'Scatter', xlabel = 'Petal Len', ylabel = 'Petal Wd' )
    axs[1,1].bar(['sepal_l', 'sepal_w', 'petal_l', 'petal_w'],iris_mean, yerr= iris_std )
    axs[1,1].set(title = 'Bar', xlabel = 'category', ylabel = 'Category Mean')
    plt.suptitle("Subplots Demo")
    plt.tight_layout(pad=3, w_pad=1, h_pad=1)
    plt.show()
21) -------- More on Subplots on Same figure -------------  

22) -------- Multiple figures in single session ----------
    import matplotlib.pyplot as plt
    import pandas as pd
    iris = pd.read_csv("iris_dataset.csv", sep=',')
    plt.close('all') # canvas cleaned
    fig= plt.figure(1, figsize=(10,10))
    ax1 = plt.subplot2grid((3,3),(0,0))
    ax2 = plt.subplot2grid((3,3),(0,1), colspan=2)
    ax3 = plt.subplot2grid((3,3),(1,0), colspan=2, rowspan=2)
    ax4 = plt.subplot2grid((3,3),(1,2), rowspan=2)
    ax1.hist(iris['petal_width'])
    ax2.scatter(iris['petal_length'],iris['petal_width'], s=50*iris['petal_length']*iris['petal_width'],
                alpha=.26, c= iris['species'].map({'setosa': 0, 'versicolor': 1, 'virginica': 2}))
    ax3.scatter(iris['petal_length'],iris['petal_width'], c= iris['species'].map({'setosa': 0, 'versicolor': 1, 'virginica': 2}))
    ax4.violinplot(iris['petal_length'])
    plt.suptitle("Fig 1: Grid Plotting Demo", fontsize =20)
    plt.tight_layout(pad=5, w_pad=1, h_pad=1)
    plt.figure(2, figsize=(12,5))
    names= ['gp_a','gp_b','gp_c','gp_d','gp_e','gp_f']
    values = [1,2,3,4,5,6]
    plt.subplot(131)
    plt.bar(names, values, color='orange')
    plt.subplot(132)
    plt.scatter(names, values, color='orange')
    plt.subplot(133)
    plt.plot(names, values, color='orange')
    plt.suptitle("Fig 2: Row Plotting Demo", fontsize =20)
    plt.tight_layout(pad=5, w_pad=1, h_pad=1)
    plt.show()
22) -------- Multiple figures in single session ----------

23) -------- Logarithmic scale -------

23) -------- Logarithmic scale -------