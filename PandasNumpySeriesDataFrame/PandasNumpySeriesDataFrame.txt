---------------- Pandas from Stackoverflow ----------------------
1) Appending to a DF
df2 = df2.append(df1, ignore_index= True)  # This will create a df with common columns and adds columns that are on eiter dfs.
The ignore_index = True means that the index will be recreated.

2) Update 0th row and column'Rev' value to 1
df2.loc[0,'Rev']=1

3) Changing EP column of df2 to category
df2['EP']= df2['EP'].astype('category')

4) Creating dataframes from a dictionary
df3 = pd.DataFrame({"SecondCol2":[1,2,3], "FirstCol1":[4,5,6]} , columns=['FirstCol1','SecondCol2'])  # if you want to specify column order

5) Creating df from numbers
df = pd.DataFrame(np.arange(0,25).reshape(5,5), columns=list('ABCDE')) 

6) Creating df with list of tuples
listOfTuples = [('p1','t1',1,2,3),('p2','t2',1,2,3),('p3','t3',1,2,3)]
df = pd.DataFrame(data= listOfTuples , columns=['c1','c2','c3','c4','c5'])

7) Using JSON
import json
ob = [{"Name":"N1", "Age":50},{"Name":"N2", "Age":55}]
with open('myjson.json', 'w', ) as output:
    json.dump(ob,output, indent=4)   # creates a json file
df= pd.read_json("myjson.json")      # reads the json file.
 
8) Multi indexing 

cols = [['C1','C1','C1','C2','C2','C2'],['C1_1','C1_2','C1_3','C2_1','C2_2','C2_3']]
rows = [['R1','R1','R1','R2','R2','R2'],['R1_1','R1_2','R1_3','R2_1','R2_2','R2_3']]
col_t = list(zip(*cols))  # This makes tuples from list-of-lists
row_t = list(zip(*rows)) # This makes tuples from list-of-lists
mult_idx_col = pd.MultiIndex.from_tuples(col_t)
mult_idx_row = pd.MultiIndex.from_tuples(row_t)
data = np.arange(36).reshape(6,6)
df = pd.DataFrame(data=data, index=mult_idx_row, columns=mult_idx_col)
print(df.loc[('R1')])  # For only R1 all sub rows and columns
print(df.loc[(),('C1')]) # For only C1 all  sub columns and rows
print(df.loc[(),('C1','C1_2')]) # all rows for col C1 and subcol C1_2
print(df.loc[(),(slice(None),'C1_2')]) # all rows for subcol C1_2
print(df.loc[(slice(None),['R1_1','R2_3']),()]) # for sub rows and all columns


---------------- Pandas from Stackoverflow ----------------------



--------------Series Start---------------
1) One dimension lables array
2) Series combines the best of list and dictionary
	List stores objects in order and associates each values a numeric position in line called index position.
	Dictionary is able to establish association between two objects (key, and value)
	A series combines best of both. It can preserve values in order and also preserve a numeric value for each position.
	A serties also associates a identifier lable with each value like key.
	The lable in Series can be duplicate (non unique)
3) Series also provide many methods for maths, statistics and data analytics
4) Create a series with a list
	lst = ['l1','l2','l3','l4']
	SeriesFromList = pd. Series(lst) # Series is a class that takes an object and creates a Series

5) Create a series with a dictionary
	myDict = {'k1':1,'k2':2,'k3':3,'k4':4,'k5':5 }
	SeriesFromDict = pd.Series(myDict)
6) Create a series by reading csv 
	if you have only one column in usecols and then you use squeeze, then it returns a Series, else dataframe is returned
		df = pd.read_csv("C:\\Users\\Dell\\Desktop\\ACC.csv", usecols=['Date'])
		df = pd.read_csv("C:\\Users\\Dell\\Desktop\\ACC.csv", usecols=['Date']).squeeze()

7) Series with builtin functions
	len(SeriesObject)
	sum(SeriesObject) # will sum all items in SeriesObject
	min(SeriesObject)
	max(SeriesObject)

8) Check for inclusion
	8 in SeriesObject  		#this will check if 8 is in the 'index' of SeriesObject and not in 'values' of SeriesObject
	8 in SeriesObject.values   	#this will check if 8 is in the 'values'. There is no bracket after values


9) Extracting values from Series using index position
	print(s_c[-1])  # this will not work in series
	print(s_c[-1:-2:-1]) # this works in series to get only last element
	print(s_c[:-1:-1]) # This works in series
	print(s_c[-1:-5:-1]) # Start from last element and move back 4
	print(s_c[-7:])  # This is same as (s_c.tail(7))
	print(s_c[-1:])  # This gives last element only
	print(s_c[:5])  # This is same as s_c.head(5)
	print(s_c[[10,11,15]]) # This gives values at specific index positions

  
10) Extracting values from Seris using index label 
	s_c = pd.read_csv("C:\\Users\\Dell\\Desktop\\ACC.csv", index_col=['date'], usecols=['date','c']).squeeze()  # This will craete a series object s_c
	print(s_c['19-Dec-19'])  # extracts value using label.  
	# The index lable can be non unique
	print(s_c['19-Dec-19']) # Here there are 2 values which are related with label '19-Dec-19'
	print(s_c[30])
	s_c[['19-Dec-19','20-Dec-19']] # multiple values
	guitars = pd.Series(guitars_dict)  # craetes a series using a dictionary as source

11) get method on Series
	if an index position or label is not found, then regular square bracket gives error. The get method provides fallback mechanism in case of error
	print(s_c.get('26-Dec-19'))
	print(s_c.get('30-Dec-19'))  # By default, None is returned if label is not found, which we can overwrite by passing another argument
	print(s_c.get('30-Dec-19', "If 30-Dec-19 does not exist, this is returned"))

12) overwrite a Series value
	s_c[['13-Dec-19','14-Dec-19']] =[200,200]
	Even if one of the values from list is not found, then None is returned
 
13) copy method
	df = pd.read_csv("C:\\Users\\Dell\\Desktop\\ACC.csv", index_col=['date'], usecols=['date','c'])
	series_from_df = df.squeeze() # This is a view and not a new object. 
	series_from_df[0] =99 #This operation will also affect df from where this series is created

	if you do not want the original data source (df in this case), then use copy 
	series_from_df = df.squeeze().copy()  # This will craete a new series object separate from dataframe and will NOT impact df if series value is changed


14) inplace parameter
	series_from_df = pd.read_csv("C:\\Users\\Dell\\Desktop\\ACC.csv",index_col=['date'],usecols=['date','c']).squeeze().copy()
	series_from_df.sort_values(ascending=False, inplace= True) # If the .copy() in above is not used, then this inplace=True will give error


15) Math methods on Series
	print(s_c.count()) #count ignores missing data
	print(s_c.describe())


16) Broadcast
	How to apply a consistant mathematical operation to every value in a Series is called breadcasting
	s_c=s_c.add(10)  # or s_c = s_c +10  # This will add 10 to all values of series



17) value_count()
	print(s_c.value_counts())  # number of occurance of each unique value
	print(s_c.value_counts(normalize=True)) *100  # gives % of each value


18) map method
	map method associates each value in a series to another value
	difference between a map and apply is that apply acceps a function whereas map accepts an associative object such as a dictionary.
	if a mapping is not found, then the value in series is replaced with NaN
	
	example
	mappings_dic = { 229.35: 'top val1', 163.85:'top val2' }
	s_c= s_c.map(mappings_dic )
	print(s_c.head())
	 
	map acceps wide varity of inputs like dictionary, series 
		
--------------Series End-----------------

--------------DataFrame 1----------------

--------------DataFrame 1----------------



	