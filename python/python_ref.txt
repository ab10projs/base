Guido Van Rossum 1991
1) Class and Objects

Class
Has attributes
Has actions
No memory is allocated when class is created

Object
Has Variables
Has Methods
A seperate block of memory is created when created

2) In Python , list, varibles , functions etc.. all are objects
3) Interpreted:  In python, program code is called source code. 

Source Code --(Python compiler converts to  )-->   Byte Code   ---(PVM has interpreter that converts byte code to ) ----> Machine Code  ---(Processor runs Machine code)--> FINAL RESULTS

Program.py --(is compiled to compiled code file)-> Program.pyc -- (PVM's Interpreter first understand the machine's processor and OS, then in converts the byte code into Machine Code)

As interpreter translates code line-by-line, it is slow. Some flovors of Python use JIT compilers which are fast like PyPy.

Normally when we compile a python program, we do not see .pyc file and the machine code generated by PVM , as this is done in memory
Example
C:>python x.py   .. this command will compile the program named x.py . python at the start is command to call python compiler.
To create the .pyc file, this command can be used....    C:>python -m py_compile x.py    ..here we are calling python compiler with -m option .. the .pyc file is created in folder __pycache__  


4) Python is considered as scripting language
5) Some popular libraries
numpy - package to process  multidim arrays
pandas - DF, powerful data structures, stats
matplotlib - 2D graphs
pillow - image library
scipy - scritific library
w3lib - web related functions


Flavors of Python
1) CPython: Standart python compiler implemented in C. Advantage is that C and C++ programs can be executed in CPython
2) Jython: Compatble with Java
3) IronPython: .Net framework, runs on Common Language Runtime 
4) PyPy:  Has JIT. Implemneted using Python
5) Anaconda Python: Large scale data processing , predictive analytics 


HOW To share the program with end user:
There are 2 ways.
1) By sharing .pyc files. The user installs PVM on his machine and uses .pyc
2) by creating .exe using other libraries like py2exe where user double clicks the .exe file



MEMORY MGMT
1) Memory manager in PVM allocates memory
2) All objects in python are stored on seperate memory called Heap
3) Heap is allocated at Runtime
---------------------------------------------------------------------------

---------------------------------------------------------------------------
LIST
1) List can store elements of different data types, whereas array can contain data of Single type
2) List is a group of elements
3) empty_list = []
4) l = ['a',1,2,3,[4,5,6]]
5) print(l[4][2])  ... gives 6
6) print(l[-1::-1])   .. this says start with last element(-1) and to till the end in reverse step of -1
so print(l[-1:-4:-1])  .. start with last element(-1) and go till 4th element in reverse step of -1
7) l =  list(range(0,10,1))
8) l[4:5]= 88, 89
9) l.remove(89)   .. removes 89 from list
10) print(l1+l2)  will concatinate two lists
11) print(2 in l1)   .. True
12) Aliasing
l1 =  list(range(0,10,1))
l2 =  l1
Here any change in l1 will be seen in l2 also

13) to have seperate copy of
l2 =  l1 [:]

14) Methods of list
- sum()  .. sum of all elements of list
- index(88) .. will return index of element '88'
- appemd(10000)  .. will append 10000 at end of list
- insert(10, 10001) .. will insert 10001 at index 10
- copy()
- l1.extend(l2)   ., will add all elements of l2 to l1
- count(88)   .. will return number of times 88 occurs in list
- remove(88)  .. removes 88
- pop()
- reverse()  
- clear()  .. all elements are deleted
- sort(reverse = True)

15) Nested lists
l1 = [1,3,4,9, [1,3,4,9, 10]]
16) l1[4][1]   returns 3

17) list comprehension
print([x*2 for x in l1])
----------------------------------------------------------------

TUPLE
1) immutable
2) methods like pop() etc will not work
3) created for data that should not be changed
4) tup1 = ()  .. empty tuple
5) tup2 = (10,)  ..  a comma at end           fee = (25000,)*4     if you put comma at end a tuple with 4 vales of 25000 are created
6) tup3 = (10,20,30, 'yd')
7) tup4 = 1,2,3,4,5   ... no brackets
8) nestedTup = (10,20,30, (3,4,5,9))
9) addind a new element to tuple is done in different way as tuples are immutable
l = [1,2,0,66]
tup1 = l[:2] + [999] + l[2:]
10) basic operations of tuple
- print( len( tup1) )    .. len
- concat    
l = [1,2,0,66]
tup1 = l[:2] + [999] + l[2:]
print(tup1)
tup1 = tuple(tup1)
print(type(tup1))
fee = (25000,)* 4
tup1 = tup1+fee
print(tup1)

---------------------------------------------------------------------

DICTIONARIES

1) dict = {"K1":"v1","K2": 100, "K3":222}
dict = {"K1": "v1", "K2": 100, "K3": 222}
print(dict["K1"])
2) key value pair are counted as 1 element in dictionary
3) dict["K1"] ="New_v1"    ...Modify one value as 
4) del dict["K1"]    ...To delete a value
5) print('K1' in dict)   ... prints True or false if 'K1' is in key or not
6) keys should be unique, else the values will be overwritten
7) Keys should be immutable (so list can not be keys) ... keys can be string, int, tuples
8) dict.clear()     ...clears all key value pairs
9) new_dict = dict.copy()          ... copies elements to a new dictionary
10) print(new_dict.get("K1",["If Key not found"]))     
11) new_dict.update(dict)     ... adds all key values from dict to new_dict
12) c= new_dict.pop('c1')    .. pops key "c1" and assigns the value of c1 to c
13) dict.setdefault("G1",["as G1 was not found"])      ... if key G1 is not in dict, then key val pair of G1 and "as G1.. " will be added
14) d= eval( input("enter in {}"))     ... taking input and creating a dictionary
15) d.update({"K7":77})   .. this will add a new key value   
16) print(d.get('K1', -1))     .. returns value of K1     if K1 is not found, then -1 is returned
17) dict() is a function to convert into dictionary
C = ["A","B","C"]
c = ["a","b","c"]
z= zip(C,c)
print(z)
d= dict(z)
print(d)

18) converting a string to dictionary
st = "A1=22,A2=33,A4=44"
lst=[]
for x in st.split(','):
    y=x.split("=")
    lst.append(y)

print(lst)
print(dict(lst))


19) OrderdDict can be used to maibtain order
from collections import OrderdDict








